#random messing around with the API

# code partially from advisor Nada, her script inspired by those in https://github.com/ChloeL19/RLVF

from joblib import Memory
memory = Memory("cachegpt")
import openai
import sys

from tenacity import (
    retry,
    stop_after_attempt,
    wait_random_exponential,
    wait_fixed
)  # for exponential backoff
import yaml

with open('_sass/config.yaml', 'r') as file:
    config = yaml.safe_load(file)

openai.organization = "org-f2tK1brD8eM1W91o2X5WgNoy"
openai.api_key = config['OPENAI_KEY']

def default_model_if_none(model=None):
    if model is None:
        model = "gpt-3.5-turbo"
    return model

@retry(wait=wait_random_exponential(min=10, max=30), stop=stop_after_attempt(25))
def generate(messages, model=None): # "gpt-3.5-turbo", "gpt-4"
    model = default_model_if_none(model)
    print("calling GPT... model="+model)

    return openai.ChatCompletion.create(
        model=model,
        messages=messages
        )


#this will be input 
theme =  "yucky awful design" 

message = "return beautiful unusual css for a website that looks like"+ theme + "that replaces this css code + """"@import "vars";

/*
 * Basic
 */

html {
    height: 100%;
    margin: 0;
    padding: 0;
}
body {
    margin: 0;
    font-family: "Inconsolata";
    height: 100%;
}
a {
    text-decoration: none;
    color: $accent;
}
a:hover {
    text-decoration: underline;
}
hr {
    border: 0;
    height: 0;
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.3);
}

/*
 * Navbar
 */

#author-name {
    font-size: 30px;
    color: #272727;
    display: inline-block;
}
.navbar {
    padding: 50px 0 50px 0;
}
.navbar-ul {
    display: inline-block;
    margin: 0;
    padding: 5px 0 5px 0;
    margin-left: 20px;
}
.nav-list {
    list-style-type: none;
    margin: 0 5px 0 10px;
}
.alignable {
    display: inline-block;
}
.pull-left {
    @extend .alignable;
    float: left;
}
.pull-right {
    @extend .alignable;
    float: right;
}

/* Divs */

.container {
    max-width: $max-width;
    margin: auto;
}
.wrapper {
    min-height: 100%;
}

/* Institute Image */

#ins-logo {
	margin: auto;
	display: block;
	max-height: 100px;
	text-align: center;
}

/* Mobile */

@media (max-width: 800px) {
    .container {
        max-width: $med-width;
        transition: 0.3s ease all;
    }
}

@media (max-width: 650px) {
    .container {
        max-width: 83%;
    }
    .navbar-ul {
        margin-top: 5px;
    }
}

@media (max-width: 500px) {
	.navbar {
		text-align: center;
		padding: 50px 0px 0px 0px;
	}
	#author-name {
		width: 100%;
		float: none;
	}
	#navlist {
		padding: 10px 0 10px 0;
		margin: 0;
		display: block;
		float: none;
		text-align: center;
		width: 100%;
	}
	#navlist li.alignable {
		display: inline-block;
	}
	#navlist li.pull-left {
		float: none;
	}
	#navlist li.nav-list {
		margin: 0;
	}
}

@import "typography";
@import "tables";"""


@memory.cache
def ask(message, model=None):
    response = generate([{"role":"user", "content": message}], model=model)
    return response.choices[0].message.content

creation = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-0613",
        messages= [{"role":"user", "content": message}],
        functions = [
    {
      "name": "get_css",
      "description": "makes css to fit a visual theme",
      "parameters": {
        "type": "object", #??
        "properties": {
          "csscode": {
            "type": "string", #??
            "description": "this will be the css code used for the website"
          },
        },
        "required": ["css code"]
      }
    }
  ]
        )

csscode = str(creation.choices[0].message.function_call.arguments[15:-1])

def add_css_to_stylefile(csscode):
    with open("_sass/_style.scss", "w") as stylefile:
        stylefile.write(csscode)
        stylefile.close()

add_css_to_stylefile(csscode)

# add_css_to_stylefile("TESTTTT")